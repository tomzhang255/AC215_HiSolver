[
    {
        "input": "# Use error_console to print errors so that it outputs to stderr .",
        "output": "logger , console , error_console = make_logger ( parser [ `` logger '' ] , parser [ `` CLI '' ] [ `` verbosity '' ] , ) cli_ctx_settings = parse_cli_ctx ( parser [ `` CLI_CTX '' ] )"
    },
    {
        "input": "# TODO : temporary to have a clean terminal output when working with PIL or matplotlib",
        "output": "logging.getLogger ( `` PIL '' ) .setLevel ( logging.INFO ) logging.getLogger ( `` matplotlib '' ) .setLevel ( logging.INFO ) config = ManimConfig ( ) .digest_parser ( parser ) frame = ManimFrame ( config )"
    },
    {
        "input": "# This has to go here because it needs access to this module 's config",
        "output": "@ contextmanager def tempconfig ( temp : ManimConfig | dict ) - > _GeneratorContextManager : `` '' '' Context manager that temporarily modifies the global `` config `` object . Inside the `` with `` statement , the modified config will be used . After context manager exits , the config will be restored to its original state . Parameters -- -- -- -- -- temp Object whose keys will be used to temporarily update the global `` config `` . Examples -- -- -- -- Use `` with tempconfig ( { ... } ) `` to temporarily change the default values of certain config options . .. code-block : : pycon > > > config [ `` frame_height '' ] 8.0 > > > with tempconfig ( { `` frame_height '' : 100.0 } ) : ... print ( config [ `` frame_height '' ] ) ... 100.0 > > > config [ `` frame_height '' ] 8.0 `` '' '' global config original = config.copy ( ) temp = { k : v for k , v in temp.items ( ) if k in original }"
    },
    {
        "input": "# NOT change the dictionary that every module has a reference to .",
        "output": "config.update ( temp ) try : yield finally : config.update ( original )"
    }
]