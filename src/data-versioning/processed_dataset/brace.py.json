[
    {
        "input": "# of to get the tip regardless of orientation .",
        "output": "return self.get_all_points ( ) [ self.tip_point_index ] def get_direction ( self ) - > np.ndarray : vect = self.get_tip ( ) - self.get_center ( ) return vect / get_norm ( vect ) class BraceLabel ( VMobject ) : label_constructor : type = Tex def __init__ ( self , obj : VMobject | list [ VMobject ] , text : str | Iterable [ str ] , brace_direction : np.ndarray = DOWN , label_scale : float = 1.0 , label_buff : float = DEFAULT_MOBJECT_TO_MOBJECT_BUFFER , * * kwargs ) - > None : super ( ) .__init__ ( * * kwargs ) self.brace_direction = brace_direction self.label_scale = label_scale self.label_buff = label_buff if isinstance ( obj , list ) : obj = VGroup ( * obj ) self.brace = Brace ( obj , brace_direction , * * kwargs ) self.label = self.label_constructor ( * listify ( text ) , * * kwargs ) self.label.scale ( self.label_scale ) self.brace.put_at_tip ( self.label , buff=self.label_buff ) self.set_submobjects ( [ self.brace , self.label ] ) def creation_anim ( self , label_anim : Animation = FadeIn , brace_anim : Animation = GrowFromCenter ) - > AnimationGroup : return AnimationGroup ( brace_anim ( self.brace ) , label_anim ( self.label ) ) def shift_brace ( self , obj : VMobject | list [ VMobject ] , * * kwargs ) : if isinstance ( obj , list ) : obj = VMobject ( * obj ) self.brace = Brace ( obj , self.brace_direction , * * kwargs ) self.brace.put_at_tip ( self.label ) self.submobjects [ 0 ] = self.brace return self def change_label ( self , * text : str , * * kwargs ) : self.label = self.label_constructor ( * text , * * kwargs ) if self.label_scale ! = 1 : self.label.scale ( self.label_scale ) self.brace.put_at_tip ( self.label ) self.submobjects [ 1 ] = self.label return self def change_brace_label ( self , obj : VMobject | list [ VMobject ] , * text : str ) : self.shift_brace ( obj ) self.change_label ( * text ) return self def copy ( self ) : copy_mobject = copy.copy ( self ) copy_mobject.brace = self.brace.copy ( ) copy_mobject.label = self.label.copy ( ) copy_mobject.set_submobjects ( [ copy_mobject.brace , copy_mobject.label ] ) return copy_mobject class BraceText ( BraceLabel ) : label_constructor : type = TexText"
    }
]