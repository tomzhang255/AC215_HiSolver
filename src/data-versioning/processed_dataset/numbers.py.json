[
    {
        "input": "# Aligned to bottom unless it starts with `` ^ ''",
        "output": "include_background_rectangle : bool = False , edge_to_fix : Vect3 = LEFT , font_size : float = 48 , text_config : dict = dict ( ) ,"
    },
    {
        "input": "# Do not pass in font_size here",
        "output": "* * kwargs ) : self.num_decimal_places = num_decimal_places self.include_sign = include_sign self.group_with_commas = group_with_commas self.digit_buff_per_font_unit = digit_buff_per_font_unit self.show_ellipsis = show_ellipsis self.unit = unit self.include_background_rectangle = include_background_rectangle self.edge_to_fix = edge_to_fix self.font_size = font_size self.text_config = dict ( text_config ) self.char_to_mob_map = dict ( ) super ( ) .__init__ ( color=color , stroke_width=stroke_width , fill_opacity=fill_opacity , * * kwargs ) self.set_submobjects_from_number ( number ) self.init_colors ( ) def set_submobjects_from_number ( self , number : float | complex ) - > None : self.number = number self.set_submobjects ( [ ] ) self.text_config [ `` font_size '' ] = self.get_font_size ( ) num_string = self.num_string = self.get_num_string ( number ) self.add ( * map ( self.char_to_mob , num_string ) )"
    },
    {
        "input": "# Add non-numerical bits",
        "output": "if self.show_ellipsis : dots = self.char_to_mob ( `` ... '' ) dots.arrange ( RIGHT , buff=2 * dots [ 0 ] .get_width ( ) ) self.add ( dots ) if self.unit is not None : self.unit_sign = Tex ( self.unit , font_size=self.get_font_size ( ) ) self.add ( self.unit_sign ) self.arrange ( buff=self.digit_buff_per_font_unit * self.get_font_size ( ) , aligned_edge=DOWN )"
    },
    {
        "input": "# to the bottom",
        "output": "for i , c in enumerate ( num_string ) : if c == `` \u2013 '' and len ( num_string ) > i + 1 : self [ i ] .align_to ( self [ i + 1 ] , UP ) self [ i ] .shift ( self [ i + 1 ] .get_height ( ) * DOWN / 2 ) elif c == `` , '' : self [ i ] .shift ( self [ i ] .get_height ( ) * DOWN / 2 ) if self.unit and self.unit.startswith ( `` ^ '' ) : self.unit_sign.align_to ( self , UP ) if self.include_background_rectangle : self.add_background_rectangle ( ) def get_num_string ( self , number : float | complex ) - > str : if isinstance ( number , complex ) : formatter = self.get_complex_formatter ( ) else : formatter = self.get_formatter ( ) num_string = formatter.format ( number ) rounded_num = np.round ( number , self.num_decimal_places ) if num_string.startswith ( `` - '' ) and rounded_num == 0 : if self.include_sign : num_string = `` + '' + num_string [ 1 : ] else : num_string = num_string [ 1 : ] num_string = num_string.replace ( `` - '' , `` \u2013 '' ) return num_string def char_to_mob ( self , char : str ) - > Tex | Text : if char not in self.char_to_mob_map : self.char_to_mob_map [ char ] = Text ( char , * * self.text_config ) result = self.char_to_mob_map [ char ] .copy ( ) result.scale ( self.get_font_size ( ) / result.font_size ) return result def init_uniforms ( self ) - > None : super ( ) .init_uniforms ( ) self.uniforms [ `` font_size '' ] = self.font_size def get_font_size ( self ) - > float : return float ( self.uniforms [ `` font_size '' ] ) def get_formatter ( self , * * kwargs ) - > str : `` '' '' Configuration is based first off instance attributes , but overwritten by any kew word argument . Relevant key words : - include_sign - group_with_commas - num_decimal_places - field_name ( e.g . 0 or 0.real ) `` '' '' config = dict ( [ ( attr , getattr ( self , attr ) ) for attr in [ `` include_sign '' , `` group_with_commas '' , `` num_decimal_places '' , ] ] ) config.update ( kwargs ) ndp = config [ `` num_decimal_places '' ] return `` '' .join ( [ `` { `` , config.get ( `` field_name '' , `` '' ) , `` : '' , `` + '' if config [ `` include_sign '' ] else `` '' , `` , '' if config [ `` group_with_commas '' ] else `` '' , f '' . { ndp } f '' , `` } '' , ] ) def get_complex_formatter ( self , * * kwargs ) - > str : return `` '' .join ( [ self.get_formatter ( field_name= '' 0.real '' ) , self.get_formatter ( field_name= '' 0.imag '' , include_sign=True ) , `` i '' ] ) def get_tex ( self ) : return self.num_string def set_value ( self , number : float | complex ) - > Self : move_to_point = self.get_edge_center ( self.edge_to_fix ) style = self.family_members_with_points ( ) [ 0 ] .get_style ( ) self.set_submobjects_from_number ( number ) self.move_to ( move_to_point , self.edge_to_fix ) self.set_style ( * * style ) return self def _handle_scale_side_effects ( self , scale_factor : float ) - > Self : self.uniforms [ `` font_size '' ] = scale_factor * self.uniforms [ `` font_size '' ] return self def get_value ( self ) - > float | complex : return self.number def increment_value ( self , delta_t : float | complex = 1 ) - > Self : self.set_value ( self.get_value ( ) + delta_t ) return self class Integer ( DecimalNumber ) : def __init__ ( self , number : int = 0 , num_decimal_places : int = 0 , * * kwargs , ) : super ( ) .__init__ ( number , num_decimal_places=num_decimal_places , * * kwargs ) def get_value ( self ) - > int : return int ( np.round ( super ( ) .get_value ( ) ) )"
    }
]