[
    {
        "input": "# add 0. to avoid negative 0 in output",
        "output": "array ( [ 1.65 , 0. , 0 . ] ) `` `` '' return self.point_from_proportion ( 0.5 ) @ property def tip_point ( self ) : r '' '' '' The tip point of the arrow tip . Examples -- -- -- -- : : > > > from manim import Arrow > > > arrow = Arrow ( np.array ( [ 0 , 0 , 0 ] ) , np.array ( [ 2 , 0 , 0 ] ) , buff=0 ) > > > arrow.tip.tip_point.round ( 2 ) + 0. array ( [ 2. , 0. , 0 . ] ) `` `` '' return self.points [ 0 ] @ property def vector ( self ) : r '' '' '' The vector pointing from the base point to the tip point . Examples -- -- -- -- : : > > > from manim import Arrow > > > arrow = Arrow ( np.array ( [ 0 , 0 , 0 ] ) , np.array ( [ 2 , 2 , 0 ] ) , buff=0 ) > > > arrow.tip.vector.round ( 2 ) + 0. array ( [ 0.25 , 0.25 , 0 . ] ) `` `` '' return self.tip_point - self.base @ property def tip_angle ( self ) : r '' '' '' The angle of the arrow tip . Examples -- -- -- -- : : > > > from manim import Arrow > > > arrow = Arrow ( np.array ( [ 0 , 0 , 0 ] ) , np.array ( [ 1 , 1 , 0 ] ) , buff=0 ) > > > round ( arrow.tip.tip_angle , 5 ) == round ( PI/4 , 5 ) True `` '' '' return angle_of_vector ( self.vector ) @ property def length ( self ) : r '' '' '' The length of the arrow tip . Examples -- -- -- -- : : > > > from manim import Arrow > > > arrow = Arrow ( np.array ( [ 0 , 0 , 0 ] ) , np.array ( [ 1 , 2 , 0 ] ) ) > > > round ( arrow.tip.length , 3 ) 0.35 `` '' '' return np.linalg.norm ( self.vector ) class StealthTip ( ArrowTip ) : r '' '' '' 'Stealth ' fighter / kite arrow shape . Naming is inspired by the corresponding ` TikZ arrow shape < https : //tikz.dev/tikz-arrows"
    },
    {
        "input": "# sec-16.3 > ` __ .",
        "output": "`` `` '' def __init__ ( self , fill_opacity=1 , stroke_width=3 , length=DEFAULT_ARROW_TIP_LENGTH / 2 , start_angle=PI , * * kwargs , ) : self.start_angle = start_angle VMobject.__init__ ( self , fill_opacity=fill_opacity , stroke_width=stroke_width , * * kwargs ) self.set_points_as_corners ( [ [ 2 , 0 , 0 ] ,"
    },
    {
        "input": "# tip",
        "output": "[ -1.2 , 1.6 , 0 ] , [ 0 , 0 , 0 ] ,"
    },
    {
        "input": "# base",
        "output": "[ -1.2 , -1.6 , 0 ] , [ 2 , 0 , 0 ] ,"
    },
    {
        "input": "# close path , back to tip",
        "output": "] ) self.scale ( length / self.length ) @ property def length ( self ) : `` '' '' The length of the arrow tip . In this case , the length is computed as the height of the triangle encompassing the stealth tip ( otherwise , the tip is scaled too large ) . `` '' '' return np.linalg.norm ( self.vector ) * 1.6 class ArrowTriangleTip ( ArrowTip , Triangle ) : r '' '' '' Triangular arrow tip . '' '' '' def __init__ ( self , fill_opacity=0 , stroke_width=3 , length=DEFAULT_ARROW_TIP_LENGTH , width=DEFAULT_ARROW_TIP_LENGTH , start_angle=PI , * * kwargs , ) : Triangle.__init__ ( self , fill_opacity=fill_opacity , stroke_width=stroke_width , start_angle=start_angle , * * kwargs , ) self.width = width self.stretch_to_fit_width ( length ) self.stretch_to_fit_height ( width ) class ArrowTriangleFilledTip ( ArrowTriangleTip ) : r '' '' '' Triangular arrow tip with filled tip . This is the default arrow tip shape. `` '' '' def __init__ ( self , fill_opacity=1 , stroke_width=0 , * * kwargs ) : super ( ) .__init__ ( fill_opacity=fill_opacity , stroke_width=stroke_width , * * kwargs ) class ArrowCircleTip ( ArrowTip , Circle ) : r '' '' '' Circular arrow tip . '' '' '' def __init__ ( self , fill_opacity=0 , stroke_width=3 , length=DEFAULT_ARROW_TIP_LENGTH , start_angle=PI , * * kwargs , ) : self.start_angle = start_angle Circle.__init__ ( self , fill_opacity=fill_opacity , stroke_width=stroke_width , * * kwargs ) self.width = length self.stretch_to_fit_height ( length ) class ArrowCircleFilledTip ( ArrowCircleTip ) : r '' '' '' Circular arrow tip with filled tip . '' '' '' def __init__ ( self , fill_opacity=1 , stroke_width=0 , * * kwargs ) : super ( ) .__init__ ( fill_opacity=fill_opacity , stroke_width=stroke_width , * * kwargs ) class ArrowSquareTip ( ArrowTip , Square ) : r '' '' '' Square arrow tip . '' '' '' def __init__ ( self , fill_opacity=0 , stroke_width=3 , length=DEFAULT_ARROW_TIP_LENGTH , start_angle=PI , * * kwargs , ) : self.start_angle = start_angle Square.__init__ ( self , fill_opacity=fill_opacity , stroke_width=stroke_width , side_length=length , * * kwargs , ) self.width = length self.stretch_to_fit_height ( length ) class ArrowSquareFilledTip ( ArrowSquareTip ) : r '' '' '' Square arrow tip with filled tip . '' '' '' def __init__ ( self , fill_opacity=1 , stroke_width=0 , * * kwargs ) : super ( ) .__init__ ( fill_opacity=fill_opacity , stroke_width=stroke_width , * * kwargs )"
    }
]