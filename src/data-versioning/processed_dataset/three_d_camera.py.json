[
    {
        "input": "# NOTE : DocStrings From parent",
        "output": "return self.modified_rgbas ( vmobject , vmobject.get_stroke_rgbas ( background ) ) def get_fill_rgbas ( self , vmobject ) :"
    },
    {
        "input": "# NOTE : DocStrings From parent",
        "output": "return self.modified_rgbas ( vmobject , vmobject.get_fill_rgbas ( ) ) def get_mobjects_to_display ( self , * args , * * kwargs ) :"
    },
    {
        "input": "# NOTE : DocStrings From parent",
        "output": "mobjects = super ( ) .get_mobjects_to_display ( * args , * * kwargs ) rot_matrix = self.get_rotation_matrix ( ) def z_key ( mob ) : if not ( hasattr ( mob , `` shade_in_3d '' ) and mob.shade_in_3d ) : return np.inf"
    },
    {
        "input": "# based on how close it is to the camera",
        "output": "return np.dot ( mob.get_z_index_reference_point ( ) , rot_matrix.T ) [ 2 ] return sorted ( mobjects , key=z_key ) def get_phi ( self ) : `` '' '' Returns the Polar angle ( the angle off Z_AXIS ) phi . Returns -- -- -- - float The Polar angle in radians. `` '' '' return self.phi_tracker.get_value ( ) def get_theta ( self ) : `` '' '' Returns the Azimuthal i.e the angle that spins the camera around the Z_AXIS . Returns -- -- -- - float The Azimuthal angle in radians. `` '' '' return self.theta_tracker.get_value ( ) def get_focal_distance ( self ) : `` '' '' Returns focal_distance of the Camera . Returns -- -- -- - float The focal_distance of the Camera in MUnits. `` '' '' return self.focal_distance_tracker.get_value ( ) def get_gamma ( self ) : `` '' '' Returns the rotation of the camera about the vector from the ORIGIN to the Camera . Returns -- -- -- - float The angle of rotation of the camera about the vector from the ORIGIN to the Camera in radians `` '' '' return self.gamma_tracker.get_value ( ) def get_zoom ( self ) : `` '' '' Returns the zoom amount of the camera . Returns -- -- -- - float The zoom amount of the camera. `` '' '' return self.zoom_tracker.get_value ( ) def set_phi ( self , value : float ) : `` '' '' Sets the polar angle i.e the angle between Z_AXIS and Camera through ORIGIN in radians . Parameters -- -- -- -- -- value The new value of the polar angle in radians. `` '' '' self.phi_tracker.set_value ( value ) def set_theta ( self , value : float ) : `` '' '' Sets the azimuthal angle i.e the angle that spins the camera around Z_AXIS in radians . Parameters -- -- -- -- -- value The new value of the azimuthal angle in radians. `` '' '' self.theta_tracker.set_value ( value ) def set_focal_distance ( self , value : float ) : `` '' '' Sets the focal_distance of the Camera . Parameters -- -- -- -- -- value The focal_distance of the Camera. `` '' '' self.focal_distance_tracker.set_value ( value ) def set_gamma ( self , value : float ) : `` '' '' Sets the angle of rotation of the camera about the vector from the ORIGIN to the Camera . Parameters -- -- -- -- -- value The new angle of rotation of the camera. `` '' '' self.gamma_tracker.set_value ( value ) def set_zoom ( self , value : float ) : `` '' '' Sets the zoom amount of the camera . Parameters -- -- -- -- -- value The zoom amount of the camera. `` '' '' self.zoom_tracker.set_value ( value ) def reset_rotation_matrix ( self ) : `` '' '' Sets the value of self.rotation_matrix to the matrix corresponding to the current position of the camera `` '' '' self.rotation_matrix = self.generate_rotation_matrix ( ) def get_rotation_matrix ( self ) : `` '' '' Returns the matrix corresponding to the current position of the camera . Returns -- -- -- - np.array The matrix corresponding to the current position of the camera. `` '' '' return self.rotation_matrix def generate_rotation_matrix ( self ) : `` '' '' Generates a rotation matrix based off the current position of the camera . Returns -- -- -- - np.array The matrix corresponding to the current position of the camera. `` '' '' phi = self.get_phi ( ) theta = self.get_theta ( ) gamma = self.get_gamma ( ) matrices = [ rotation_about_z ( -theta - 90 * DEGREES ) , rotation_matrix ( -phi , RIGHT ) , rotation_about_z ( gamma ) , ] result = np.identity ( 3 ) for matrix in matrices : result = np.dot ( matrix , result ) return result def project_points ( self , points : np.ndarray | list ) : `` '' '' Applies the current rotation_matrix as a projection matrix to the passed array of points . Parameters -- -- -- -- -- points The list of points to project . Returns -- -- -- - np.array The points after projecting. `` '' '' frame_center = self.frame_center focal_distance = self.get_focal_distance ( ) zoom = self.get_zoom ( ) rot_matrix = self.get_rotation_matrix ( ) points = points - frame_center points = np.dot ( points , rot_matrix.T ) zs = points [ : , 2 ] for i in 0 , 1 : if self.exponential_projection :"
    },
    {
        "input": "# the exponential helps smooth it out .",
        "output": "factor = np.exp ( zs / focal_distance ) lt0 = zs < 0 factor [ lt0 ] = focal_distance / ( focal_distance - zs [ lt0 ] ) else : factor = focal_distance / ( focal_distance - zs ) factor [ ( focal_distance - zs ) < 0 ] = 10 * * 6 points [ : , i ] * = factor * zoom return points def project_point ( self , point : list | np.ndarray ) : `` '' '' Applies the current rotation_matrix as a projection matrix to the passed point . Parameters -- -- -- -- -- point The point to project . Returns -- -- -- - np.array The point after projection. `` '' '' return self.project_points ( point.reshape ( ( 1 , 3 ) ) ) [ 0 , : ] def transform_points_pre_display ( self , mobject , points , ) :"
    },
    {
        "input": "# TODO : Write Docstrings for this Method .",
        "output": "points = super ( ) .transform_points_pre_display ( mobject , points ) fixed_orientation = mobject in self.fixed_orientation_mobjects fixed_in_frame = mobject in self.fixed_in_frame_mobjects if fixed_in_frame : return points if fixed_orientation : center_func = self.fixed_orientation_mobjects [ mobject ] center = center_func ( ) new_center = self.project_point ( center ) return points + ( new_center - center ) else : return self.project_points ( points ) def add_fixed_orientation_mobjects ( self , * mobjects : Mobject , use_static_center_func : bool = False , center_func : Callable [ [ ] , np.ndarray ] | None = None , ) : `` '' '' This method allows the mobject to have a fixed orientation , even when the camera moves around . E.G If it was passed through this method , facing the camera , it will continue to face the camera even as the camera moves . Highly useful when adding labels to graphs and the like . Parameters -- -- -- -- -- * mobjects The mobject whose orientation must be fixed . use_static_center_func Whether or not to use the function that takes the mobject's center as centerpoint , by default False center_func The function which returns the centerpoint with respect to which the mobject will be oriented , by default None `` '' ''"
    },
    {
        "input": "# every single time a projection happens",
        "output": "def get_static_center_func ( mobject ) : point = mobject.get_center ( ) return lambda : point for mobject in mobjects : if center_func : func = center_func elif use_static_center_func : func = get_static_center_func ( mobject ) else : func = mobject.get_center for submob in mobject.get_family ( ) : self.fixed_orientation_mobjects [ submob ] = func def add_fixed_in_frame_mobjects ( self , * mobjects : Mobject ) : `` '' '' This method allows the mobject to have a fixed position , even when the camera moves around . E.G If it was passed through this method , at the top of the frame , it will continue to be displayed at the top of the frame . Highly useful when displaying Titles or formulae or the like . Parameters -- -- -- -- -- * * mobjects The mobject to fix in frame. `` '' '' for mobject in extract_mobject_family_members ( mobjects ) : self.fixed_in_frame_mobjects.add ( mobject ) def remove_fixed_orientation_mobjects ( self , * mobjects : Mobject ) : `` '' '' If a mobject was fixed in its orientation by passing it through : meth : ` .add_fixed_orientation_mobjects ` , then this undoes that fixing . The Mobject will no longer have a fixed orientation . Parameters -- -- -- -- -- mobjects The mobjects whose orientation need not be fixed any longer. `` '' '' for mobject in extract_mobject_family_members ( mobjects ) : if mobject in self.fixed_orientation_mobjects : del self.fixed_orientation_mobjects [ mobject ] def remove_fixed_in_frame_mobjects ( self , * mobjects : Mobject ) : `` '' '' If a mobject was fixed in frame by passing it through : meth : ` .add_fixed_in_frame_mobjects ` , then this undoes that fixing . The Mobject will no longer be fixed in frame . Parameters -- -- -- -- -- mobjects The mobjects which need not be fixed in frame any longer. `` '' '' for mobject in extract_mobject_family_members ( mobjects ) : if mobject in self.fixed_in_frame_mobjects : self.fixed_in_frame_mobjects.remove ( mobject )"
    }
]