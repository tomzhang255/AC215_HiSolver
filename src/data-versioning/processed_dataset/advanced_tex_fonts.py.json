[
    {
        "input": "# Example 1 Manually creating a Template",
        "output": "TemplateForFrenchCursive = TexTemplate ( preamble=r '' '' '' \\usepackage [ english ] { babel } \\usepackage { amsmath } \\usepackage { amssymb } \\usepackage [ T1 ] { fontenc } \\usepackage [ default ] { frcursive } \\usepackage [ eulergreek , noplusnominus , noequal , nohbar , % nolessnomore , noasterisk ] { mathastext } '' '' '' , ) def FrenchCursive ( * tex_strings , * * kwargs ) : return Tex ( * tex_strings , tex_template=TemplateForFrenchCursive , * * kwargs ) class TexFontTemplateManual ( Scene ) : `` '' '' An example scene that uses a manually defined TexTemplate ( ) object to create LaTeX output in French Cursive font '' '' '' def construct ( self ) : self.add ( Tex ( `` Tex Font Example '' ) .to_edge ( UL ) ) self.play ( Create ( FrenchCursive ( `` $ f : A \\\\longrightarrow B $ '' ) .shift ( UP ) ) ) self.play ( Create ( FrenchCursive ( `` Behold ! We can write math in French Cursive '' ) ) ) self.wait ( 1 ) self.play ( Create ( Tex ( `` See more font templates at \\\\\\\\ http : //jf.burnol.free.fr/showcase.html '' , ) .shift ( 2 * DOWN ) , ) , ) self.wait ( 2 )"
    },
    {
        "input": "# Example 2 , using a Template from the collection",
        "output": "class TexFontTemplateLibrary ( Scene ) : `` '' '' An example scene that uses TexTemplate objects from the TexFontTemplates collection to create sample LaTeX output in every font that will compile on the local system . Please Note : Many of the in the TexFontTemplates collection require that specific fonts are installed on your local machine . For example , choosing the template TexFontTemplates.comic_sans will not compile if the Comic Sans Micrososft font is not installed . This scene will only render those Templates that do not cause a TeX compilation error on your system . Furthermore , some of the ones that do render , may still render incorrectly . This is beyond the scope of manim . Feel free to experiment. `` '' '' def construct ( self ) : def write_one_line ( template ) : x = Tex ( template.description , tex_template=template ) .shift ( UP ) self.play ( Create ( x ) ) self.wait ( 1 ) self.play ( FadeOut ( x ) ) examples = [ TexFontTemplates.american_typewriter ,"
    },
    {
        "input": "# `` American Typewriter ''",
        "output": "TexFontTemplates.antykwa ,"
    },
    {
        "input": "# `` Antykwa P\u00f3\u0142tawskiego ( TX Fonts for Greek and math symbols ) ''",
        "output": "TexFontTemplates.apple_chancery ,"
    },
    {
        "input": "# `` Apple Chancery ''",
        "output": "TexFontTemplates.auriocus_kalligraphicus ,"
    },
    {
        "input": "# `` Auriocus Kalligraphicus ( Symbol Greek ) ''",
        "output": "TexFontTemplates.baskervald_adf_fourier ,"
    },
    {
        "input": "# `` Baskervald ADF with Fourier ''",
        "output": "TexFontTemplates.baskerville_it ,"
    },
    {
        "input": "# `` Baskerville ( Italic ) ''",
        "output": "TexFontTemplates.biolinum ,"
    },
    {
        "input": "# `` Biolinum ''",
        "output": "TexFontTemplates.brushscriptx ,"
    },
    {
        "input": "# `` BrushScriptX-Italic ( PX math and Greek ) ''",
        "output": "TexFontTemplates.chalkboard_se ,"
    },
    {
        "input": "# `` Chalkboard SE ''",
        "output": "TexFontTemplates.chalkduster ,"
    },
    {
        "input": "# `` Chalkduster ''",
        "output": "TexFontTemplates.comfortaa ,"
    },
    {
        "input": "# `` Comfortaa ''",
        "output": "TexFontTemplates.comic_sans ,"
    },
    {
        "input": "# `` Comic Sans MS ''",
        "output": "TexFontTemplates.droid_sans ,"
    },
    {
        "input": "# `` Droid Sans ''",
        "output": "TexFontTemplates.droid_sans_it ,"
    },
    {
        "input": "# `` Droid Sans ( Italic ) ''",
        "output": "TexFontTemplates.droid_serif ,"
    },
    {
        "input": "# `` Droid Serif ''",
        "output": "TexFontTemplates.droid_serif_px_it ,"
    },
    {
        "input": "# `` Droid Serif ( PX math symbols ) ( Italic ) ''",
        "output": "TexFontTemplates.ecf_augie ,"
    },
    {
        "input": "# `` ECF Augie ( Euler Greek ) ''",
        "output": "TexFontTemplates.ecf_jd ,"
    },
    {
        "input": "# `` ECF JD ( with TX fonts ) ''",
        "output": "TexFontTemplates.ecf_skeetch ,"
    },
    {
        "input": "# `` ECF Skeetch ( CM Greek ) ''",
        "output": "TexFontTemplates.ecf_tall_paul ,"
    },
    {
        "input": "# `` ECF Tall Paul ( with Symbol font ) ''",
        "output": "TexFontTemplates.ecf_webster ,"
    },
    {
        "input": "# `` ECF Webster ( with TX fonts ) ''",
        "output": "TexFontTemplates.electrum_adf ,"
    },
    {
        "input": "# `` Electrum ADF ( CM Greek ) ''",
        "output": "TexFontTemplates.epigrafica ,"
    },
    {
        "input": "# Epigrafica",
        "output": "TexFontTemplates.fourier_utopia ,"
    },
    {
        "input": "# `` Fourier Utopia ( Fourier upright Greek ) ''",
        "output": "TexFontTemplates.french_cursive ,"
    },
    {
        "input": "# `` French Cursive ( Euler Greek ) ''",
        "output": "TexFontTemplates.gfs_bodoni ,"
    },
    {
        "input": "# `` GFS Bodoni ''",
        "output": "TexFontTemplates.gfs_didot ,"
    },
    {
        "input": "# `` GFS Didot ( Italic ) ''",
        "output": "TexFontTemplates.gfs_neoHellenic ,"
    },
    {
        "input": "# `` GFS NeoHellenic ''",
        "output": "TexFontTemplates.gnu_freesans_tx ,"
    },
    {
        "input": "# `` GNU FreeSerif ( and TX fonts symbols ) ''",
        "output": "TexFontTemplates.gnu_freeserif_freesans ,"
    },
    {
        "input": "# `` GNU FreeSerif and FreeSans ''",
        "output": "TexFontTemplates.helvetica_fourier_it ,"
    },
    {
        "input": "# `` Helvetica with Fourier ( Italic ) ''",
        "output": "TexFontTemplates.latin_modern_tw_it ,"
    },
    {
        "input": "# `` Latin Modern Typewriter Proportional ( CM Greek ) ( Italic ) ''",
        "output": "TexFontTemplates.latin_modern_tw ,"
    },
    {
        "input": "# `` Latin Modern Typewriter Proportional ''",
        "output": "TexFontTemplates.libertine ,"
    },
    {
        "input": "# `` Libertine ''",
        "output": "TexFontTemplates.libris_adf_fourier ,"
    },
    {
        "input": "# `` Libris ADF with Fourier ''",
        "output": "TexFontTemplates.minion_pro_myriad_pro ,"
    },
    {
        "input": "# `` Minion Pro and Myriad Pro ( and TX fonts symbols ) ''",
        "output": "TexFontTemplates.minion_pro_tx ,"
    },
    {
        "input": "# `` Minion Pro ( and TX fonts symbols ) ''",
        "output": "TexFontTemplates.new_century_schoolbook ,"
    },
    {
        "input": "# `` New Century Schoolbook ( Symbol Greek ) ''",
        "output": "TexFontTemplates.new_century_schoolbook_px ,"
    },
    {
        "input": "# `` New Century Schoolbook ( Symbol Greek , PX math symbols ) ''",
        "output": "TexFontTemplates.noteworthy_light ,"
    },
    {
        "input": "# `` Noteworthy Light ''",
        "output": "TexFontTemplates.palatino ,"
    },
    {
        "input": "# `` Palatino ( Symbol Greek ) ''",
        "output": "TexFontTemplates.papyrus ,"
    },
    {
        "input": "# `` Papyrus ''",
        "output": "TexFontTemplates.romande_adf_fourier_it ,"
    },
    {
        "input": "# `` Romande ADF with Fourier ( Italic ) ''",
        "output": "TexFontTemplates.slitex ,"
    },
    {
        "input": "# `` SliTeX ( Euler Greek ) ''",
        "output": "TexFontTemplates.times_fourier_it ,"
    },
    {
        "input": "# `` Times with Fourier ( Italic ) ''",
        "output": "TexFontTemplates.urw_avant_garde ,"
    },
    {
        "input": "# `` URW Avant Garde ( Symbol Greek ) ''",
        "output": "TexFontTemplates.urw_zapf_chancery ,"
    },
    {
        "input": "# `` URW Zapf Chancery ( CM Greek ) ''",
        "output": "TexFontTemplates.venturis_adf_fourier_it ,"
    },
    {
        "input": "# `` Venturis ADF with Fourier ( Italic ) ''",
        "output": "TexFontTemplates.verdana_it ,"
    },
    {
        "input": "# `` Verdana ( Italic ) ''",
        "output": "TexFontTemplates.vollkorn_fourier_it ,"
    },
    {
        "input": "# `` Vollkorn with Fourier ( Italic ) ''",
        "output": "TexFontTemplates.vollkorn ,"
    },
    {
        "input": "# `` Vollkorn ( TX fonts for Greek and math symbols ) ''",
        "output": "TexFontTemplates.zapf_chancery ,"
    },
    {
        "input": "# `` Zapf Chancery ''",
        "output": "] self.add ( Tex ( `` Tex Font Template Example '' ) .to_edge ( UL ) ) for font in examples : try : write_one_line ( font ) except Exception : print ( `` FAILURE on `` , font.description , `` - skipping . '' ) self.play ( Create ( Tex ( `` See more font templates at \\\\\\\\ http : //jf.burnol.free.fr/showcase.html '' , ) .shift ( 2 * DOWN ) , ) , ) self.wait ( 2 )"
    }
]