[
    {
        "input": "# type : ignore",
        "output": "case_sensitive=False , ) , help= '' Render quality at the follow resolution framerates , respectively : `` + `` , `` .join ( reversed ( [ f ' { q [ `` pixel_width '' ] } x { q [ `` pixel_height '' ] } { q [ `` frame_rate '' ] } FPS' for q in QUALITIES.values ( ) if q [ `` flag '' ] ] ) ) , ) , option ( `` -r '' , `` -- resolution '' , callback=validate_resolution , default=None , help='Resolution in `` W , H '' for when 16:9 aspect ratio isn\\'t possible . ' , ) , option ( `` -- fps '' , `` -- frame_rate '' , `` frame_rate '' , type=float , default=None , help= '' Render at this frame rate . `` , ) , option ( `` -- renderer '' , type=click.Choice ( [ renderer_type.value for renderer_type in RendererType ] , case_sensitive=False , ) , help= '' Select a renderer for your Scene . `` , default= '' cairo '' , ) , option ( `` -g '' , `` -- save_pngs '' , is_flag=True , default=None , help= '' Save each frame as png ( Deprecated ) . `` , ) , option ( `` -i '' , `` -- save_as_gif '' , default=None , is_flag=True , help= '' Save as a gif ( Deprecated ) . `` , ) , option ( `` -- save_sections '' , default=None , is_flag=True , help= '' Save section videos in addition to movie file . `` , ) , option ( `` -s '' , `` -- save_last_frame '' , default=None , is_flag=True , help= '' Save last frame as png ( Deprecated ) . `` , ) , option ( `` -t '' , `` -- transparent '' , is_flag=True , help= '' Render scenes with alpha channel . `` , ) , option ( `` -- use_projection_fill_shaders '' , is_flag=True , help= '' Use shaders for OpenGLVMobject fill which are compatible with transformation matrices . `` , default=None , ) , option ( `` -- use_projection_stroke_shaders '' , is_flag=True , help= '' Use shaders for OpenGLVMobject stroke which are compatible with transformation matrices . `` , default=None , ) , )"
    }
]